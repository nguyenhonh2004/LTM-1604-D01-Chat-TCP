package chatapp;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.concurrent.*;

/**
 * Server chat nhi·ªÅu client (multi-threaded) h·ªó tr·ª£:
 *  - ƒêƒÉng k√Ω
 *  - ƒêƒÉng nh·∫≠p
 *  - G·ª≠i/nh·∫≠n tin nh·∫Øn
 *  - Danh s√°ch b·∫°n b√® online/offline
 */
public class Server {
    private static final int PORT = 12345; // c·ªïng server

    // L∆∞u th√¥ng tin user ƒë√£ ƒëƒÉng k√Ω
    static class UserRecord {
        String password;
        byte[] avatar;
        UserRecord(String p, byte[] a) {
            password = p;
            avatar = a;
        }
    }

    // "Database" user
    private final Map<String, UserRecord> users = new ConcurrentHashMap<>();
    // Danh s√°ch user ƒëang online
    private final Map<String, ClientHandler> online = new ConcurrentHashMap<>();

    public static void main(String[] args) throws Exception {
        new Server().start();
    }

    // B·∫Øt ƒë·∫ßu server
    public void start() throws Exception {
        ServerSocket ss = new ServerSocket(PORT);
        System.out.println("‚úÖ Server l·∫Øng nghe t·∫°i c·ªïng " + PORT);

        while (true) {
            Socket s = ss.accept();
            System.out.println("üîó K·∫øt n·ªëi m·ªõi t·ª´ " + s.getInetAddress());
            // x·ª≠ l√Ω ƒëƒÉng k√Ω/ƒëƒÉng nh·∫≠p tr∆∞·ªõc
            new Thread(() -> handleClient(s)).start();
        }
    }

    /**
     * X·ª≠ l√Ω client giai ƒëo·∫°n ƒë·∫ßu (ƒëƒÉng k√Ω / ƒëƒÉng nh·∫≠p)
     */
    private void handleClient(Socket s) {
        try {
            ObjectOutputStream out = new ObjectOutputStream(s.getOutputStream());
            ObjectInputStream in = new ObjectInputStream(s.getInputStream());

            String username = null;
            boolean loggedIn = false;

            while (!loggedIn) {
                Object o = in.readObject();
                if (!(o instanceof Message)) continue;
                Message m = (Message) o;

                switch (m.getType()) {
                    case "REGISTER": {
                        String u = m.getSender();
                        Message.RegisterData rd = (Message.RegisterData) m.getContent();
                        if (u == null || rd == null || rd.password == null) {
                            out.writeObject(new Message("REGISTER_FAIL", "SERVER", u, "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá"));
                        } else if (users.containsKey(u)) {
                            out.writeObject(new Message("REGISTER_FAIL", "SERVER", u, "T√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i"));
                        } else {
                            users.put(u, new UserRecord(rd.password, rd.avatarBytes));
                            out.writeObject(new Message("REGISTER_OK", "SERVER", u, "ƒêƒÉng k√Ω th√†nh c√¥ng"));
                            System.out.println("üÜï Ng∆∞·ªùi d√πng ƒëƒÉng k√Ω: " + u);
                        }
                        out.flush();
                        break;
                    
                  
                    }
                    default:
                       
                }
            }

        } catch (EOFException | SocketException eof) {
            System.out.println("‚ö† Client ng·∫Øt k·∫øt n·ªëi tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p.");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /** G·ª≠i tin nh·∫Øn cho 1 user */
    private void sendTo(String user, Message m) {
        ClientHandler ch = online.get(user);
        if (ch != null) {
            ch.send(m);
        }
    }

    /** G·ª≠i tin nh·∫Øn cho t·∫•t c·∫£ user online */
    private void broadcast(Message m) {
        for (ClientHandler ch : online.values()) {
            ch.send(m);
        }
    }

    /** C·∫≠p nh·∫≠t danh s√°ch user cho t·∫•t c·∫£ client */
    private void broadcastUserList() {
        ArrayList<Message.UserInfo> list = new ArrayList<>();
        for (Map.Entry<String, UserRecord> e : users.entrySet()) {
            String u = e.getKey();
            boolean on = online.containsKey(u);
            byte[] av = e.getValue().avatar;
            list.add(new Message.UserInfo(u, on, av));
        }
        broadcast(new Message("USER_LIST", "SERVER", null, list));
    }

    /** X√≥a user kh·ªèi danh s√°ch online */
    private void removeOnline(String username) {
        online.remove(username);
        broadcastUserList();
        System.out.println("üö™ Ng∆∞·ªùi d√πng tho√°t: " + username);
    }

    /**
     * X·ª≠ l√Ω sau khi client ƒëƒÉng nh·∫≠p th√†nh c√¥ng
     */
    class ClientHandler implements Runnable {
        final String username;
        final Socket socket;
        final ObjectInputStream in;
        final ObjectOutputStream out;

        ClientHandler(String username, Socket socket, ObjectInputStream in, ObjectOutputStream out) {
            this.username = username;
            this.socket = socket;
            this.in = in;
            this.out = out;
        }

        @Override
        public void run() {
            try {
                while (true) {
                    Object o = in.readObject();
                    if (!(o instanceof Message)) continue;
                    Message m = (Message) o;

                    switch (m.getType()) {
                        case "TEXT":
                        case "IMAGE":
                        case "FILE": {
                            if (m.getTarget() == null) broadcast(m);
                            else {
                                sendTo(m.getTarget(), m);
                                if (!m.getSender().equals(m.getTarget())) sendTo(m.getSender(), m);
                            }
                            break;
                        }
                        case "TYPING": {
                            if (m.getTarget() != null) sendTo(m.getTarget(), m);
                            else broadcast(m);
                            break;
                        }
                        case "LOGOUT": {
                            removeOnline(username);
                            socket.close();
                            return;
                        }
                        default:
                            System.out.println("‚ö† Lo·∫°i tin nh·∫Øn kh√¥ng h·ªó tr·ª£: " + m.getType());
                    }
                }
            } catch (EOFException | SocketException eof) {
                System.out.println("‚ö† Client m·∫•t k·∫øt n·ªëi: " + username);
            } catch (Exception ex) {
                ex.printStackTrace();
            } finally {
                removeOnline(username);
            }
        }

        void send(Message m) {
            try {
                out.writeObject(m);
                out.flush();
            } catch (IOException ignored) {}
        }
    }
}
